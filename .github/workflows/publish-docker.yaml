name: Publish Docker Image

on:
  workflow_call:
    inputs:
      version:
        description: 'Semantic version (e.g. 0.1.0)'
        required: true
        type: string
      keep_last_n:
        description: 'How many tags to keep (default=5)'
        required: false
        default: 5
        type: number
    secrets:
      DOCKERHUB_TOKEN:
        required: true

env:
  SERVICE_NAME: haraka-demo
  DOCKERHUB_USERNAME: wjbdev
  REGISTRY: docker.io

jobs:
  build-and-push:
    name: Build & Push
    runs-on: ubuntu-latest
    outputs:
      version: ${{ inputs.version }}
      keep_last_n: ${{ inputs.keep_last_n }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:${{ inputs.version }}
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.SERVICE_NAME }}:latest

  retention-list:
    name: Retention Policy – List & Sort Tags
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      KEEP_LAST_N: ${{ needs.build-and-push.outputs.keep_last_n }}
      TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch all tags from Docker Hub
        id: fetch
        run: |
          echo "› Fetching tags for $DOCKERHUB_USERNAME/$SERVICE_NAME"
          curl -s -u "$DOCKERHUB_USERNAME:$TOKEN" \
            "https://hub.docker.com/v2/repositories/$DOCKERHUB_USERNAME/$SERVICE_NAME/tags/?page_size=100" \
            > all-tags.json
          echo "::set-output name=data::$(jq -c '.results' all-tags.json)"

      - name: Sort tags by last_updated
        id: sort
        run: |
          mapfile -t sorted < <(
            jq -r '.[] | "\(.last_updated) \(.name)"' <<<"${{ steps.fetch.outputs.data }}" \
              | sort \
              | awk '{print $2}'
          )
          echo "All tags (oldest→newest):"
          printf " • %s\n" "${sorted[@]}"

          start=$(( ${#sorted[@]} - KEEP_LAST_N ))
          if [ $start -lt 0 ]; then start=0; fi
          recent=( "${sorted[@]:$start}" )
          echo
          echo "Most recent $KEEP_LAST_N tags:"
          printf " • %s\n" "${recent[@]}"

          echo "::set-output name=all::${sorted[*]}"
          echo "::set-output name=recent::${recent[*]}"
